"use strict";

//!Цикл While
//?Синтаксис
/*while (Условие) {
  //Тело цыкла
  //Тут будет дополняться код
}*/

//*Пример
let num = 0;
while (num < 5) {
  console.log(num);
  num++;
}
//*Пример
let num2 = 5;
while (num2) {
  console.log(num2);
  num2--;
}
//* Пример без {}
let num3 = 5;
while (num3) console.log(num3--);

//!----------------------------------------------------------------
//!Констуркция  Do...While
//*Используеться что бы даже если значение будет False то вернуло хотя бы одно значение
let num4 = 0;
do {
  console.log(num4);
  num4++;
} while (num < 5);

//!----------------------------------------------------------------
//!Цикл For
//?Синтиксис
/*for (Начало; Условие; Шаг) {
  //Тело цыкла
  //Тут будет выполняться код
}
*/
//*Пример "Встроенное" обявление переменной
//*Переменная не будет работать в не блока
for (let num5 = 0; num5 < 5; num5++) {
  console.log(num5);
}
/*
Работа цыкла For:
1) Выполняеться начало - let num5 = 0
2) Выполняеться условие - num5 < 5
3) Если условие true выполняеться тело цыкла - console.log(num5)
4) Выполняеться шаг - num++
Повтор начиная с пункта номер 2
*/

//*Пример существуящая переменная до блока
let num6;
for (num6 = 0; num6 < 5; num6++) {
  console.log(num6);
}
console.log(`Вывод вне цыкла: ${num6}`);

//*Пример Можно убрать любую часть цыкла
let num7 = 0;
for (; num7 < 5; ) {
  console.log(num7);
  num7++;
}

//!----------------------------------------------------------------
//!Деректива Break - Заканчивает цыкл
let num8 = 0;
for (; num8 < 5; num8++) {
  console.log(num8);
  if (num8 == 2) break;
}
console.log(`Работа окончена,num = ${num8}`);

//!----------------------------------------------------------------
//!Деректива continue - Прирывает выполнение цыкла и переходит на следущую литерацыю.
let num9 = 0;
for (; num9 < 5; num9++) {
  if (num9 == 2) continue;
  console.log(num9);
}

//!----------------------------------------------------------------
//!Метки break/continue
//*break
firstFor: for (let num10 = 0; num10 < 2; num10++) {
  for (let size = 0; size < 3; size++) {
    if (size == 2) {
      break firstFor;
    }
    console.log(size);
  }
}
//*continue
firstFor: for (let num11 = 0; num11 < 2; num11++) {
  for (let size = 0; size < 3; size++) {
    if (size == 2) {
      continue firstFor;
    }
    console.log(size);
  }
}
/*
?1.While - Проверяет условие перед каждой итерацией.
?2.do..while - Проверяет условие после каждой итерации.
?3.for (;;) - Проверяет условие перед каждой итерацией,
?есть возможность задать дополнительные настройки.

?Чтобы организовать бесконечный цикл,используют констукцию while (true)
?При этом он,как и любой другой цыкл,может быть прерван директивой break.

?Если на данной итерации цикла делать больше ничего не надо,но полностью
?прекращать цыкл не следует - используют директиву continue.

?Обе эти директивы поддерижвают метки, которые ставяться перед цыклом.
?Метки - единственный способ для break/continue выйти за пределы текущего
?цикла,повлиять на выполнение внешнего.
?Помним,что метки не позволяют прыгнуть в произвольное место кода,в Js нет
?такой возможности.
*/
